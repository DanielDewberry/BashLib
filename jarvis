#!/bin/bash
# -*- coding: utf-8 -*-

export BashLib="${PWD}/src"
# shellcheck source=/dev/null
source "${BashLib}/logging.sh"

usage() {
  cat <<EOF | sed 's/^    //'
    ${0}: Command [Arguments]

        Commands:
            backup-project         No arguments
            deploy-template        No arguments
            find-executable-files  No arguments
            find-sh-files          No arguments
            shellcheck-files       No arguments (files provided on stdin)
            shfmt-files            Run shfmt on files whose names are provided
                                     on stdin.  Argument: print / replace
            new-file-template      No arguments
            sanitize               No arguments
            set-executable         No arguments
            test-runner            No arguments
EOF
}

new-file-template() {
  cat <<'EOF'
#!/bin/bash
# -*- coding: utf-8 -*-

# shellcheck source=/dev/null
# shellcheck disable=SC2154
if [[ -z "${BashLib}" ]]; then
    printf  'BashLib environment variable is not set' >&2
    exit 1
fi
# shellcheck disable=SC2154
# shellcheck source=/dev/null
source "${BashLib}/testing.sh"
source "${BashLib}/utility.sh"
EOF
}


fn_deploy_template() {
    cat <<'EOF'
#!/bin/bash
# -*- coding: utf-8 -*-

main()
{
  # Synopsis
  #
  #
  # Arguments
  #
  #
  # Return codes
  #
  #
  # FDs
  #
  #

  return "$?"
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  main "$@"
  exit "$?"
fi
EOF
}


fn_find_shell_files() {
  find ./src -type f -name '*.sh'
  return
}


fn_find_executable_files() {
  find ./jarvis ./tests ./examples -type f -executable
  return
}


fn_shellcheck_files_from_stdin() {
  local -a ARRAY
  mapfile -t ARRAY
  readonly ARRAY
  shellcheck --color=always "${ARRAY[@]}"
  return
}


fn_shfmt_files_stdin() {
  local -a ARRAY
  local Action

  Action=${1:-print}
  readonly Action
  shift

  mapfile -t ARRAY
  readonly ARRAY

  if [[ "${Action}" == 'print' ]]; then
    shfmt -ln bash -d -ci -i 2 "${ARRAY[@]}"
  elif [[ "${Action}" == 'replace' ]]; then
    for filename in "${ARRAY[@]}"; do
      if [[ ! -f "${filename}" ]]; then
        printf 'could not find file %s' "${filename}"
        continue
      fi
      replaced_data="$(shfmt -ln bash -ci -i 2 "${filename}")"
      printf '%s' "${replaced_data}" >"${filename}"
    done
  else
    printf 'unrecognised value\n' >&2
    return 1
  fi

  return
}


Action="$1"
shift

case "${Action}" in
  backup-project)
    if (( "$#" > 0 )); then
      echo_err "unexpected arguments detected: ${Action} $*"
      exit 1
    fi

    find . -type f  -not -name '*.gz' -and -not \( -type f -name backups \) \
        | xargs tar --force-local -pcvzf "backups/project-$(date -Is).tar.gz"
    ;;

  find-sh-files)
    fn_find_shell_files
    ;;

  find-executable-files)
    fn_find_executable_files
    ;;

  shellcheck-files)
    fn_shellcheck_files_from_stdin
    ;;

  shfmt-files)
    fn_shfmt_files_stdin "$@"
    ;;

  new-file-template)
    new-file-template
    ;;

  sanitize)
    if (( "$#" > 0 )); then
      echo_err "unexpected arguments detected: ${Action} $*"
      exit 1
    fi

   grep  -lr bin/bash \
       | sort \
       | grep -vE '.*swp$' \
       | xargs shellcheck \
   ;;

  set-executable)
    if (( "$#" > 0 )); then
      echo_err "unexpected arguments detected: ${Action} $*"
      exit 1
    fi

    find                 \
      tests              \
      examples           \
      -type f            \
      -not -name '*swp'  \
      -exec chmod 754 {} \;

    find                   \
      src                  \
      -type f              \
      -not -name '*swp'    \
      -exec chmod ugo-x {} \;
    ;;

  deploy-template)
    fn_deploy_template
    ;;

  test-runner)
    if (( "$#" > 0 )); then
      echo_err "unexpected arguments detected: ${Action} $*"
      exit 1
    fi

    find ./tests -type f -executable -exec {} \;
    ;;

  --help|help)
    usage
    ;;

  *)
    usage
    exit 2
    ;;
esac

exit
