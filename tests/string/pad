#! /bin/bash
# -*- coding: utf-8 -*-

source "${BashLib}/testing"
source "${BashLib}/string/pad"

test_string_length \
    10             \
    "$(string_pad_left 10 '-' 'bash')" \
    'string_pad_left: string length should be 10'

test_string_value \
    '------bash'  \
    "$(string_pad_left 10 '-' 'bash')" \
    'string_pad_left: string value'

test_string_length \
    8             \
    "$(string_pad_left 8 '-' 'BASH')" \
    'string_pad_left: string length should be 10'

test_string_value \
    '----BASH'  \
    "$(string_pad_left 8 '-' 'BASH')" \
    'string_pad_left: string value'

test_string_length \
    10             \
    "$(string_pad_left 6 '-' 'BashScript')" \
    'string_pad_left: A string longer than the padding value yields the string only'

test_string_value \
    'BashScript'  \
    "$(string_pad_left 6 '-' 'BashScript')" \
    'string_pad_left: A string longer than the padding value yields the string only'

string_pad_left 6 '-' 'BashScript' >/dev/null
rv="$?"
test_numeric_value 0 "$rv" 'string_pad_left: success yields zero return value'

string_pad_left 'too few parameters' >/dev/null
rv="$?"
test_numeric_value \
    1 \
    "$rv" \
    'string_pad_left: too few parameters yields return value 1'

string_pad_left \
    6 \
    '-' \
    'BashScript' 'Too many parameters' >/dev/null
rv="$?"
test_numeric_value \
    1 \
    "$rv" \
    'string_pad_left: too many parameters yields return value 1'


test_string_length \
    10             \
    "$(string_pad_right 10 '-' 'bash')" \
    'string_pad_right: string length should be 10'

test_string_value \
    'bash------'  \
    "$(string_pad_right 10 '-' 'bash')" \
    'string_pad_right: string value'

test_string_length \
    8             \
    "$(string_pad_right 8 '-' 'BASH')" \
    'string_pad_right: string length should be 10'

test_string_value \
    'BASH----'  \
    "$(string_pad_right 8 '-' 'BASH')" \
    'string_pad_right: string value'

test_string_length \
    10             \
    "$(string_pad_right 6 '-' 'BashScript')" \
    'string_pad_right: A string longer than the padding value yields the string only'

test_string_value \
    'BashScript'  \
    "$(string_pad_right 6 '-' 'BashScript')" \
    'string_pad_right: A string longer than the padding value yields the string only'

string_pad_right 6 '-' 'BashScript' >/dev/null
rv="$?"
test_numeric_value 0 "$rv" 'string_pad_right: success yields zero return value'

string_pad_right 'too few parameters' >/dev/null
rv="$?"
test_numeric_value 1 "$rv" 'string_pad_right: too few parameters yields return value 1'

string_pad_right 6 '-' 'BashScript' 'Too many parameters' >/dev/null
rv="$?"
test_numeric_value 1 "$rv" 'string_pad_right: too many parameters yields return value 1'


test_string_length \
    10             \
    "$(string_pad_outer 10 '-' 'bash')" \
    'string_pad_outer: string length should be 10'

test_string_value \
    '---bash---'  \
    "$(string_pad_outer 10 '-' 'bash')" \
    'string_pad_outer: string value'

test_string_length \
    8             \
    "$(string_pad_outer 8 '-' 'BASH')" \
    'string_pad_outer: string length should be 10'

test_string_value \
    '--BASH--'  \
    "$(string_pad_outer 8 '-' 'BASH')" \
    'string_pad_outer: string value'

test_string_length \
    10             \
    "$(string_pad_outer 6 '-' 'BashScript')" \
    'string_pad_outer: A string longer than the padding value yields the string only'

test_string_value \
    'BashScript'  \
    "$(string_pad_outer 6 '-' 'BashScript')" \
    'string_pad_outer: A string longer than the padding value yields the string only'

string_pad_outer 6 '-' 'BashScript' >/dev/null
rv="$?"
test_numeric_value 0 "$rv" 'string_pad_outer: success yields zero return value'

string_pad_outer 'too few parameters' >/dev/null
rv="$?"
test_numeric_value 1 "$rv" 'string_pad_outer: too few parameters yields return value 1'

string_pad_outer 6 '-' 'BashScript' 'Too many parameters' >/dev/null
rv="$?"
test_numeric_value 1 "$rv" 'string_pad_outer: too many parameters yields return value 1'

test_string_length \
    7              \
    "$(string_pad_outer 7 '-' 'Bash')" \
    'string_pad_outer: Uneven padding renders the correct string size'

test_string_value \
    '-Bash--'     \
    "$(string_pad_outer 7 '-' 'Bash')" \
    'string_pad_outer: Uneven padding renders the smaller padding size on the left'


test_string_length \
    10             \
    "$(string_pad_inner 10 '-' 'bash' 'file')" \
    'string_pad_inner: string length should be 10'

test_string_value \
    'bash--file'  \
    "$(string_pad_inner 10 '-' 'bash' 'file')" \
    'string_pad_inner: string value'

test_string_length \
    12             \
    "$(string_pad_inner 12 '-' 'BASH' 'FILE')" \
    'string_pad_inner: inner padding 12 chars with two 4 char words'

test_string_value \
    'BASH----FILE'  \
    "$(string_pad_inner 12 '-' 'BASH' 'FILE')" \
    'string_pad_inner: inner padding 12 chars with two 4 char words'

test_string_length \
    10             \
    "$(string_pad_inner 6 '-' 'Bash' 'Script')" \
    'string_pad_inner: A string longer than the padding value yields the string only'

test_string_value \
    'BashScript'  \
    "$(string_pad_inner 6 '-' 'Bash' 'Script')" \
    'string_pad_inner: A string longer than the padding value yields the string only'

string_pad_inner \
    6 \
    '-' \
    'Bash' \
    'Script' >/dev/null
rv="$?"
test_numeric_value \
    0 \
    "$rv" \
    'string_pad_inner: success yields zero return value'

string_pad_inner \
    'too few parameters' >/dev/null
rv="$?"
test_numeric_value \
    1 \
    "$rv" \
    'string_pad_inner: too few parameters yields return value 1'

string_pad_inner \
    6 \
    '-' \
    'BashScript' \
    'Too many parameters' \
    'Too many parameters' >/dev/null
rv="$?"
test_numeric_value \
    1 \
    "$rv" \
    'string_pad_inner: too many parameters yields return value 1'

# test_string_length \
#     7              \
#     "$(string_pad_inner 7 '-' 'Bash Scr')" \
#     'string_pad_inner: Uneven padding renders the correct string size'
# 
# test_string_value \
#     '-Bash--'     \
#     "$(string_pad_inner 7 '-' 'Bash')" \
#     'string_pad_inner: Uneven padding renders the smaller padding size on the left'


if [[ ${BASH_SOURCE[0]} == "$0" ]]; then
    test_summary
fi


# Todo:
# Test input char other then - works
# Test input strings work

