#! /bin/bash
# -*- coding: utf-8 -*-

# shellcheck source=/dev/null
# shellcheck disable=SC2154
if [[ -z "${BashLib}" ]]; then
  printf 'BashLib environment variable is not set\n' >&2
  exit 1
fi
# shellcheck source=/dev/null
# shellcheck disable=SC2154
source "${BashLib}/testing.sh"
source "${BashLib}/string.sh"

# Section

testing::test_string_value \
  'A' \
  "$(string::to_upper 'a')" \
  'string::to_upper: single lowercase character convert to corresponding uppercase character'

testing::test_string_value \
  'AB' \
  "$(string::to_upper 'ab')" \
  'string::to_upper: two lowercase characters convert to corresponding uppercase characters'

testing::test_string_value \
  'A' \
  "$(string::to_upper 'A')" \
  'string::to_upper: single uppercase character remains uppercase'

testing::test_string_value \
  'AB' \
  "$(string::to_upper 'AB')" \
  'string::to_upper: two uppercase characters remain uppercase'

string::to_upper 'AB' >/dev/null
rv=$?
testing::test_numeric_value \
  0 \
  $rv \
  'string::to_upper: successful operation yields return value 0'

string::to_upper >/dev/null
rv=$?
testing::test_numeric_value \
  1 \
  $rv \
  'string::to_upper: too few parameters yields return value 1'

string::to_upper 'a' 'b' >/dev/null
rv=$?
testing::test_numeric_value \
  1 \
  $rv \
  'string::to_upper: too many parameters yields return value 1'

testing::test_string_value \
  'BASH UPPERCASE' \
  "$(string::to_upper 'Bash Uppercase')" \
  'string::to_upper: mixture of uppercase and lowercase characters are converted to uppercase'

testing::test_string_value \
  ' !"#$%&'"'"'()*+,-./0123456789:;<=>?@[\]^_`{|}~' \
  "$(string::to_upper ' !"#$%&'"'"'()*+,-./0123456789:;<=>?@[\]^_`{|}~')" \
  'string::to_upper: numbers and symbols remain unaffected'

if [[ ${BASH_SOURCE[0]} == "$0" ]]; then
  testing::test_summary

  if ((TestCountFail != 0)); then
    testing::list_failed_tests
  fi
fi

# Section

testing::test_string_value \
  'a' \
  "$(string::to_lower 'A')" \
  'string::to_lower: single uppercase character convert to corresponding lowercase character'

testing::test_string_value \
  'ab' \
  "$(string::to_lower 'AB')" \
  'string::to_lower: two uppercase characters convert to corresponding lowercase characters'

testing::test_string_value \
  'a' \
  "$(string::to_lower 'a')" \
  'string::to_lower: single lowercase character remains lowercase'

testing::test_string_value \
  'ab' \
  "$(string::to_lower 'ab')" \
  'string::to_lower: two lowercase characters remain lowercase'

string::to_lower 'AB' >/dev/null
rv=$?
testing::test_numeric_value \
  0 \
  $rv \
  'string::to_lower: successful operation yields return value 0'

string::to_lower >/dev/null
rv=$?
testing::test_numeric_value \
  1 \
  $rv \
  'string::to_lower: too few parameters yields return value 1'

string::to_lower 'a' 'b' >/dev/null
rv=$?
testing::test_numeric_value \
  1 \
  $rv \
  'string::to_lower: too many parameters yields return value 1'

testing::test_string_value \
  'bash uppercase' \
  "$(string::to_lower 'Bash Uppercase')" \
  'string::to_lower: mixture of lowercase and uppercase characters are converted to lowercase'

testing::test_string_value \
  ' !"#$%&'"'"'()*+,-./0123456789:;<=>?@[\]^_`{|}~' \
  "$(string::to_lower ' !"#$%&'"'"'()*+,-./0123456789:;<=>?@[\]^_`{|}~')" \
  'string::to_lower: numbers and symbols remain unaffected'

if [[ ${BASH_SOURCE[0]} == "$0" ]]; then
  testing::test_summary

  if ((TestCountFail != 0)); then
    testing::list_failed_tests
  fi
fi

# Todo:
# Test input strings work
